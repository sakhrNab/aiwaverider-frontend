import{bm as n,bn as i,ba as c}from"./index-CDuOHj3I.js";const d={youtube:[],tiktok:[],instagram:[]},l=async()=>{try{const t=c.currentUser;if(!t)return console.warn("No authenticated user found"),null;console.log("Current user:",{uid:t.uid,email:t.email,displayName:t.displayName});const r=await t.getIdToken(!0);return console.log("Firebase token obtained, length:",r?.length),r}catch(t){return console.error("Error getting admin token:",t),null}};class m{static async getVideosByPlatform(r,e=1){if(!r||typeof r!="string"||r.trim()==="")return console.warn("Platform parameter is required and must be a non-empty string"),{videos:d[r]||[],totalPages:1,totalVideos:0,currentPage:e,hasNextPage:!1,hasPreviousPage:!1};const o=["youtube","tiktok","instagram"];if(!o.includes(r.toLowerCase()))return console.warn(`Invalid platform: ${r}. Must be one of: ${o.join(", ")}`),{videos:[],totalPages:1,totalVideos:0,currentPage:e,hasNextPage:!1,hasPreviousPage:!1};try{const s=new URLSearchParams({platform:r.toLowerCase(),page:Math.max(1,e)}),a=`${n.URL}/api/videos?${s.toString()}`;return await i.get(a)}catch(s){if(console.error(`Error fetching ${r} videos:`,s),s.message.includes("fetch")||s.message.includes("Network")||s.message.includes("400")||s.message.includes("500")||s.message.includes("platform query parameter is required"))return console.log(`Backend not available for ${r} videos, returning empty data`),{videos:d[r]||[],totalPages:1,totalVideos:0,currentPage:e,hasNextPage:!1,hasPreviousPage:!1};throw s}}static async addVideo(r){try{console.log("=== VideosService.addVideo ==="),console.log("Input videoData:",JSON.stringify(r,null,2));const e=await l();if(!e)throw new Error("Authentication required. Please log in as an admin.");console.log("Firebase token obtained, length:",e.length);const o={...r,platform:r.platform?.toLowerCase(),originalUrl:r.originalUrl?.trim(),addedBy:r.addedBy||"Admin"};Object.keys(o).forEach(a=>{(o[a]===void 0||o[a]===null||o[a]==="")&&delete o[a]}),console.log("Final payload being sent:",JSON.stringify(o,null,2));const s=await i.post(`${n.URL}/api/videos`,o,{headers:{"Content-Type":"application/json","X-Admin-Token":e}});return console.log("Video added successfully:",s),s}catch(e){console.error("=== Error adding video ==="),console.error("Error object:",e),console.error("Error message:",e.message),console.error("Error status:",e.status),console.error("Error response data:",e.response?.data),console.error("Error response status:",e.response?.status),console.error("Error response headers:",e.response?.headers);let o="Request failed with status code 400";throw e.response?.data&&(typeof e.response.data=="string"?o=e.response.data:e.response.data.message?o=e.response.data.message:e.response.data.error?o=e.response.data.error:o=JSON.stringify(e.response.data)),new Error(`Failed to add video: ${o}`)}}static async refreshVideoStats(r){try{const e=await l();if(!e)throw new Error("Authentication required. Please log in as an admin.");return await i.put(`${n.URL}/api/videos/${r}/refresh`,null,{headers:{"X-Admin-Token":e}})}catch(e){throw console.error("Error refreshing video stats:",e),new Error(`Failed to refresh video stats: ${e.message}`)}}static async deleteVideo(r){try{const e=await l();if(!e)throw new Error("Authentication required. Please log in as an admin.");return await i.delete(`${n.URL}/api/videos/${r}`,{headers:{"X-Admin-Token":e}})}catch(e){throw console.error("Error deleting video:",e),new Error(e.message||"Failed to delete video")}}static async getVideosSummary(){try{const e=["youtube","tiktok","instagram"].map(async s=>{try{const a=await this.getVideosByPlatform(s,1);return{platform:s,totalVideos:a.totalVideos||0,totalPages:a.totalPages||0}}catch(a){return console.warn(`Failed to get summary for ${s}:`,a),{platform:s,totalVideos:0,totalPages:0}}});return(await Promise.all(e)).reduce((s,a)=>(s[a.platform]=a,s),{})}catch(r){throw console.error("Error fetching videos summary:",r),new Error(`Failed to fetch videos summary: ${r.message}`)}}}export{m as V};
